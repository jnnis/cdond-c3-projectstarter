version: 2.1

commands:
  awscli-install:
    steps:
      - run:
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" \
            --output awscli.zip
            unzip awscli.zip
            sudo ./aws/install
  
  nodejs-install:
    steps:
      - run:
          command: |
            curl -fsSL "https://deb.nodesource.com/setup_13.x" | sudo -E bash -
            sudo apt install -y nodejs
      
  ansible-install:
    steps:
      - run:
          command: |
            sudo apt update 
            sudo apt install software-properties-common -y
            sudo add-apt-repository --yes --update ppa:ansible/ansible 
            sudo apt install ansible -y

  destroy-env:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      workflowID:
        default: "${CIRCLE_WORKFLOW_ID:0:7}"
        type: string
           
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            # Your code here
            aws s3 rm s3://udapeople-<<parameters.workflowID>> --recursive
            aws cloudformation delete-stack --stack-name "udapeople-frontend-<<parameters.workflowID>>"
            aws cloudformation delete-stack --stack-name "udapeople-backend-<<parameters.workflowID>>"
  
  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      workflowID:
        type: string
        default: "${CIRCLE_WORKFLOW_ID:0:7}"    
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          # Add when this will run
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            SUCCESS=$(curl --insecure https://kvdb.io/LPamLViNgAUtDLm15KvrSM/migration_<<parameters.workflowID>>)
            if (( $SUCCESS == 1 )); 
            then
              cd ~/project/backend
              npm install
              npm run migrations:revert
            fi            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: build frontend
          command: |
            # Your code here
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: build backend
          command: |
            # Your code here
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [frontend-test]
      # Your job code here
      - run:
          name: test frontend
          command: |
            # Your code here
            cd frontend
            npm install
            npm run test
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-test

  test-backend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [backend-test]
      # Your job code here
      - run:
          name: test backend
          command: |
            # Your code here
            cd backend
            npm install
            npm run test
      - save_cache:
          paths: [backend/node_modules]
          key: backend-test
            
  scan-frontend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [scanfrontend-test]
      # Your job code here
      - run:
          name: scan frontend
          command: |
            # Your code here
            cd frontend
            npm install
            # npm install oauth-sign@^0.9.0
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical
      - save_cache:
          paths: [frontend/node_modules]
          key: scanfrontend-test
  
  scan-backend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [scanbackend-test]
      # Your job code here
      - run:
          name: scan backend
          command: |
            # Your code here
            cd backend
            npm install
            # npm install oauth-sign@^0.9.0
            npm audit fix --audit-level=critical --force
            npm audit fix --audit-level=critical --force
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical
      - save_cache:
          paths: [backend/node_modules]
          key: scanbackend-test

  deploy-infrastructure:
    docker:
      # Docker image here that supports AWS CLI
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
           yum install -y tar gzip

      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
              --tags project=udapeople          
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
              --tags project=udapeople  
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            cd .circleci/ansible
            cat inventory.txt
            aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --output text --filter Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7} >> inventory.txt
            cat inventory.txt
            #  export BACKEND_IP=$(aws ec2 describe-instances \
            # --query 'Reservations[*].Instances[*].PublicIpAddress' \ 
            # --filter Name=tag:Name,Values=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7} \
            # --output text
            # )
            # echo ${BACKEND_IP}

      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt

  configure-infrastructure:
    docker:
      # Docker image here that supports Ansible
      - image: cimg/base:stable
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "50:15:98:08:9d:cd:b0:d9:95:21:e8:4e:8d:b6:49:6a"
      - attach_workspace:
          at: ~/
      
      - ansible-install
      - awscli-install

      - run:
          name: Configure server
          command: |
            cd .circleci/ansible
            cat inventory.txt
            ansible-playbook -i inventory.txt configure-server.yml
      # Here's where you will add some code to rollback on failure      
      - destroy-env 

  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            npm run migrations > migrations_dump.txt
      - run:
          name: Send mig. status to kvdb.io
          command: |
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
              curl https://kvdb.io/LPamLViNgAUtDLm15KvrSM/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
            fi
        
      - destroy-env
      - revert-migrations     
  
  deploy-frontend:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "50:15:98:08:9d:cd:b0:d9:95:21:e8:4e:8d:b6:49:6a"
      - attach_workspace:
          at: ~/
      
      - nodejs-install
      - awscli-install
      - ansible-install
      - run:
          name: backend URL
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --filters Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7} --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: backend URL
          command: | 
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      - destroy-env
      - revert-migrations

  deploy-backend:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "50:15:98:08:9d:cd:b0:d9:95:21:e8:4e:8d:b6:49:6a"
      - attach_workspace:
          at: ~/
      
      - nodejs-install
      - awscli-install
      - ansible-install
      - run:
          name: Backend Deploy
          command: |
            cd backend
            npm i
            npm run build
            cd ..
            cd .circleci/ansible
            mkdir files
            cd files
            tar -C ../../../backend -czvf artifact.tar.gz .
            cd ../
            echo "Contents  of the inventory.txt file is -------"
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml

      - destroy-env
      - revert-migrations
      
      # - run:
      #     name: backend URL
      #     command: | 
      #       cd frontend
      #       npm install
      #       npm run build
      #       tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
      #       aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      # - destroy-env
      # - revert-migrations

  smoke-test:
    docker:
      - image: cimg/base:stable 
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - nodejs-install
      - awscli-install  
      - run:
          name: Backend smoke test
          command: |
              export BE_PUB_IP=$(aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --filters Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7} --output text)
              echo ${BE_PUB_IP}
              echo backend-${CIRCLE_WORKFLOW_ID:0:7}
              export API_URL="http://${BE_PUB_IP}:3030"
              echo "${API_URL}"
              curl "${API_URL}/api/status" | grep "ok"
              # if curl "${API_URL}/api/status" | grep "ok"
              # then
              #     return 1
              # else
              #     return 0
              # fi
      - run:
          name: Frontend smoke test.
          command: |
              FE_URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"            
              echo ${FE_URL} 
              if curl -s ${FE_URL} | grep "Welcome"
              then
                exit 0
              else
                exit 1
              fi

      - destroy-env
      - revert-migrations

  cloudfront-update:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install deps., Update cloudfront distribution
          command: |
            export OLD_WFLOW_ID=$(aws cloudformation list-exports --query "Exports[?Name==\`WorkflowID\`].Value" --no-paginate --output text)
            echo OldWorkFlowID: "${OLD_WFLOW_ID}" 
            # echo ${OLD_WFLOW_ID} >> ~/OLD_WFLOW_ID.txt
            # cat ~/OLD_WFLOW_ID.txt
            # Change the initial stack name, as applicable to you
            aws cloudformation deploy \
              --template-file .circleci/files/cloudfront.yml \
              --parameter-overrides WorkflowID="udapeople-${CIRCLE_WORKFLOW_ID:0:7}" \
              --stack-name "InitialStack-${OLD_WFLOW_ID}" \
              --tags project=udapeople
            # echo "Old Work-Flow ID": "${OLD_WFLOW_ID}"
            echo OldWorkFlowID: "${OLD_WFLOW_ID}" 
            echo CurrentWorkFlowID: "${CIRCLE_WORKFLOW_ID:0:7}"

      # - destroy-env
      # - revert-migrations      

  cleanup:
    docker:
      - image: cimg/base:stable 
    steps:
      - checkout
      - awscli-install 
      - run:
          name: Get old stack workflow id
          command: |
            export STACKS=$(aws cloudformation list-stacks \
              --query "StackSummaries[*].StackName" \
              --stack-status-filter CREATE_COMPLETE --no-paginate --output text)
            echo "stacks name": "${STACKS[@]}"
            echo "Old Work-Flow ID": "${OLD_WFLOW_ID}"
            if [[ "${STACKS[@]}" =~ "${OLD_WFLOW_ID}" ]]
            then
              echo '---delete confirmed---'
              aws s3 rm s3://udapeople-${OLD_WFLOW_ID} --recursive
              aws cloudformation delete-stack --stack-name "udapeople-backend-${OLD_WFLOW_ID}"
              aws cloudformation delete-stack --stack-name "udapeople-frontend-${OLD_WFLOW_ID}"
            else
              echo '---cannot cleanup---'
            fi
            
workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [master]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
      - cleanup:
          requires: [cloudfront-update]